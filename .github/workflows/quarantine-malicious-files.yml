name: Quarantine Malicious Files

on:
  workflow_dispatch:
    inputs:
      nfs_server:
        description: 'NFS Server IP'
        required: true
        default: '192.168.200.10'
      nfs_share:
        description: 'NFS Share Path'
        required: true
        default: '/mnt/nfs_share'
      scanner_endpoint:
        description: 'Scanner Service Endpoint'
        required: true
        default: '192.168.200.50:50051'
      action:
        description: 'Action to take'
        required: true
        default: 'quarantine'
        type: choice
        options:
        - quarantine
        - delete
        - report_only
      quarantine_dir:
        description: 'Quarantine directory name'
        required: false
        default: 'quarantine_$(date +%Y%m%d_%H%M%S)'
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

jobs:
  scan-and-quarantine:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t tmfs-scanner .
        
    - name: Start NFS container
      run: |
        docker exec tmfs-nfs-delete 2>/dev/null || true
        docker run -d \
          --name tmfs-nfs-delete \
          --privileged \
          -e ENDPOINT=${{ github.event.inputs.scanner_endpoint || '192.168.200.50:50051' }} \
          -e TLS=false \
          tmfs-scanner nfs
        
    - name: Wait for container
      run: sleep 5
      
    - name: Mount NFS share
      run: |
        docker exec tmfs-nfs-delete mount -t nfs ${{ github.event.inputs.nfs_server || '192.168.200.10' }}:${{ github.event.inputs.nfs_share || '/mnt/nfs_share' }} /mnt/nfs
        
    - name: Create quarantine directory
      if: github.event.inputs.action == 'quarantine'
      run: |
        QUARANTINE_DIR="/mnt/nfs/${{ github.event.inputs.quarantine_dir || 'quarantine_$(date +%Y%m%d_%H%M%S)' }}"
        docker exec tmfs-nfs-delete mkdir -p "$QUARANTINE_DIR"
        echo "quarantine_dir=$QUARANTINE_DIR" >> $GITHUB_ENV
        
    - name: Scan for malicious files
      id: scan
      run: |
        echo "Scanning for malicious files..."
        MALICIOUS_FILES=""
        SCAN_SUMMARY=""
        
        # Find files to scan (focus on executable and script files)
        FILES_TO_SCAN=$(docker exec tmfs-nfs-delete find /mnt/nfs -type f \( -name "*.exe" -o -name "*.dll" -o -name "*.bat" -o -name "*.ps1" -o -name "*.vbs" -o -name "*.js" -o -name "*.jar" -o -name "*.msi" -o -name "*.com" -o -name "*.scr" \) 2>/dev/null | head -50)
        
        if [ -z "$FILES_TO_SCAN" ]; then
          echo "No files found to scan"
          echo "malicious_found=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        for file in $FILES_TO_SCAN; do
          echo "Scanning: $file"
          SCAN_RESULT=$(docker exec tmfs-nfs-delete /app/tmfs scan "file:$file" --tls=false --addr=${{ github.event.inputs.scanner_endpoint || '192.168.200.50:50051' }} 2>&1 || true)
          
          if echo "$SCAN_RESULT" | grep -q "malicious\|threat\|virus\|malware\|suspicious"; then
            MALICIOUS_FILES="$MALICIOUS_FILES $file"
            SCAN_SUMMARY="$SCAN_SUMMARY\n- $file: $(echo "$SCAN_RESULT" | grep -E "(malicious|threat|virus|malware|suspicious)" | head -1)"
            echo "Malicious file detected: $file"
          fi
        done
        
        if [ -n "$MALICIOUS_FILES" ]; then
          echo "malicious_found=true" >> $GITHUB_OUTPUT
          echo "malicious_files=$MALICIOUS_FILES" >> $GITHUB_OUTPUT
          echo "scan_summary=$SCAN_SUMMARY" >> $GITHUB_OUTPUT
        else
          echo "malicious_found=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Quarantine malicious files
      if: steps.scan.outputs.malicious_found == 'true' && github.event.inputs.action == 'quarantine'
      run: |
        echo "Quarantining malicious files..."
        MALICIOUS_FILES="${{ steps.scan.outputs.malicious_files }}"
        QUARANTINE_DIR="${{ env.quarantine_dir }}"
        
        for file in $MALICIOUS_FILES; do
          echo "Quarantining: $file"
          FILENAME=$(basename "$file")
          docker exec tmfs-nfs-delete mv "$file" "$QUARANTINE_DIR/${FILENAME}.quarantined"
          
          # Log quarantine
          echo "QUARANTINED: $file -> $QUARANTINE_DIR/${FILENAME}.quarantined at $(date)" >> /tmp/malicious_files_quarantined.log
        done
        
        # Create summary
        echo "## Malicious Files Quarantined" >> $GITHUB_STEP_SUMMARY
        echo "The following malicious files were quarantined:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        for file in $MALICIOUS_FILES; do
          FILENAME=$(basename "$file")
          echo "- \`$file\` → \`$QUARANTINE_DIR/${FILENAME}.quarantined\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Quarantine directory: \`$QUARANTINE_DIR\`" >> $GITHUB_STEP_SUMMARY
        echo "Quarantine completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: Delete malicious files
      if: steps.scan.outputs.malicious_found == 'true' && github.event.inputs.action == 'delete'
      run: |
        echo "Deleting malicious files..."
        MALICIOUS_FILES="${{ steps.scan.outputs.malicious_files }}"
        
        for file in $MALICIOUS_FILES; do
          echo "Deleting: $file"
          docker exec tmfs-nfs-delete rm -f "$file"
          
          # Log deletion
          echo "DELETED: $file at $(date)" >> /tmp/malicious_files_deleted.log
        done
        
        # Create summary
        echo "## Malicious Files Deleted" >> $GITHUB_STEP_SUMMARY
        echo "The following malicious files were deleted:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        for file in $MALICIOUS_FILES; do
          echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Deletion completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: Report only
      if: steps.scan.outputs.malicious_found == 'true' && github.event.inputs.action == 'report_only'
      run: |
        echo "## Malicious Files Report" >> $GITHUB_STEP_SUMMARY
        echo "The following malicious files were detected:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.scan.outputs.scan_summary }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Report generated at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "No action taken - files remain in place" >> $GITHUB_STEP_SUMMARY
        
    - name: No malicious files found
      if: steps.scan.outputs.malicious_found == 'false'
      run: |
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ No malicious files were detected." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scan completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: Cleanup
      if: always()
      run: |
        docker stop tmfs-nfs-delete || true
        docker rm tmfs-nfs-delete || true
        
    - name: Upload quarantine log
      if: steps.scan.outputs.malicious_found == 'true' && github.event.inputs.action == 'quarantine'
      uses: actions/upload-artifact@v4
      with:
        name: malicious-files-quarantined
        path: /tmp/malicious_files_quarantined.log
        retention-days: 30
        
    - name: Upload deletion log
      if: steps.scan.outputs.malicious_found == 'true' && github.event.inputs.action == 'delete'
      uses: actions/upload-artifact@v4
      with:
        name: malicious-files-deleted
        path: /tmp/malicious_files_deleted.log
        retention-days: 30 