#!/bin/bash

# Automatic malicious file deletion
# NFS Share: 192.168.200.10/mnt/nfs_share
# Scanner: 192.168.200.50:50051

set -e

echo "üóëÔ∏è Automatic Malicious File Deletion"
echo "===================================="
echo "NFS Share: 192.168.200.10/mnt/nfs_share"
echo "Scanner: 192.168.200.50:50051"
echo ""

# Configuration
NFS_SERVER="192.168.200.10"
NFS_SHARE="/mnt/nfs_share"
CONTAINER_NAME="tmfs-auto-delete"
ENDPOINT="192.168.200.50:50051"
SCAN_INTERVAL=30  # seconds

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_alert() {
    echo -e "${RED}üö® $1${NC}"
}

# Cleanup function
cleanup() {
    echo ""
    echo "üßπ Cleaning up auto-delete container..."
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
    exit 0
}

# Set trap to cleanup on exit
trap cleanup SIGINT SIGTERM

# Check if container is already running
if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
    print_warning "Container $CONTAINER_NAME is already running"
    echo "Stopping existing container..."
    docker stop $CONTAINER_NAME
    docker rm $CONTAINER_NAME
fi

# Start the container with NFS support
echo "üöÄ Starting auto-delete container..."
docker run -d \
    --name $CONTAINER_NAME \
    --privileged \
    -e ENDPOINT=$ENDPOINT \
    -e TLS=false \
    tmfs-scanner nfs

print_status "Container started successfully"

# Wait for container to be ready
echo "‚è≥ Waiting for container to be ready..."
sleep 5

# Mount the NFS share
echo "üìÅ Mounting NFS share..."
if docker exec $CONTAINER_NAME mount -t nfs $NFS_SERVER:$NFS_SHARE /mnt/nfs; then
    print_status "NFS share mounted successfully"
else
    print_error "Failed to mount NFS share"
    cleanup
    exit 1
fi

echo ""
echo "üîç Starting automatic deletion monitoring..."
echo "Scanning every $SCAN_INTERVAL seconds..."
echo "Press Ctrl+C to stop monitoring"
echo ""

# Monitoring loop
while true; do
    echo "üîÑ Scanning for malicious files... ($(date))"
    
    # Find files to scan (focus on executable and script files)
    FILES_TO_SCAN=$(docker exec $CONTAINER_NAME find /mnt/nfs -type f \( -name "*.exe" -o -name "*.dll" -o -name "*.bat" -o -name "*.ps1" -o -name "*.vbs" -o -name "*.js" -o -name "*.jar" -o -name "*.msi" -o -name "*.com" -o -name "*.scr" \) 2>/dev/null | head -20)
    
    if [ -n "$FILES_TO_SCAN" ]; then
        echo "üìã Scanning files..."
        echo "$FILES_TO_SCAN" | while read -r file; do
            if [ -n "$file" ]; then
                # Scan the file
                SCAN_RESULT=$(docker exec $CONTAINER_NAME /app/tmfs scan "file:$file" --tls=false --addr=$ENDPOINT 2>&1 || true)
                
                # Check if malicious
                if echo "$SCAN_RESULT" | grep -q "malicious\|threat\|virus\|malware\|suspicious"; then
                    print_alert "MALICIOUS FILE DETECTED: $file"
                    echo "  Threat details: $(echo "$SCAN_RESULT" | grep -E "(malicious|threat|virus|malware|suspicious)" | head -1)"
                    
                    # Delete the file immediately
                    echo "  üóëÔ∏è Deleting malicious file..."
                    if docker exec $CONTAINER_NAME rm -f "$file"; then
                        print_status "File deleted: $file"
                        
                        # Log the deletion
                        echo "DELETED: $file at $(date)" >> /tmp/malicious_files_deleted.log
                    else
                        print_error "Failed to delete: $file"
                    fi
                fi
            fi
        done
    else
        echo "  No files to scan"
    fi
    
    # Wait before next scan
    echo "‚è≥ Waiting $SCAN_INTERVAL seconds before next scan..."
    sleep $SCAN_INTERVAL
done 